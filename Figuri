namespace menuto
{
    class Program
    {
        static void Main(string[] args)
        {
            var menu = new List<int>();
            int num;
            do
            {
            Console.WriteLine("Rectangle");
                Console.WriteLine("Circle");
            Console.WriteLine("Exit");
            rectangle Rectangle = new rectangle();
                Circle circle = new Circle();
                num = int.Parse(Console.ReadLine());
                         
                    if (num == 1)
                    {
                    Console.Write("A ");
                    Rectangle.A = double.Parse(Console.ReadLine());
                    Console.Write("B ");
                    Rectangle.B = double.Parse(Console.ReadLine());
                    Console.WriteLine(Rectangle.A * Rectangle.B);
                    }
                if (num == 2)
                {
                    Console.Write("P ");
                    circle.P = Math.PI;
                    Console.Write("R ");
                    circle.R = double.Parse(Console.ReadLine());
                    Console.WriteLine(circle.P * circle.R * circle.R);
                }

            }
            while (num != 3);           
        }
    }
}

class Circle
    {
        private double p;
        public double P { get { return p; } set { p = value; } }
        private double r;
        public double R { get { return r; } set { r = value; } }
    }
    
    class rectangle
    {
       
        private double a;
        public double A { get { return a; } set { a = value; } }
        private double b;
        public double B { get { return b; } set { b = value; } }

    }
    
    public interface ISerializable
    {
        byte[] Serialize();
        int TypeDescriptor { get; }
    }
    public interface IDeserializer
    {
        ISerializable Deserialize(byte[] from, int startIndex);
        int ForTypeDescriptor { get; }
    }
    class ShapeDeserializer
    {
        Dictionary<int, IDeserializer> deserializers;
        public void RegisterDeserializer(IDeserializer d)
        {
            deserializers.Add(d.ForTypeDescriptor, d);
        }
        ISerializable Deserialize(byte[] bytes, int startIndex)
        {
            var type = BitConverter.ToInt32(bytes, startIndex);
            var d = deserializers[type];
            return d.Deserialize(bytes, startIndex);
        }
    }
